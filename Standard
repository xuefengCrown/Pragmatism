# 评判好坏的标准

没有最好的语言，没有最好的系统。只有在特定情形下的更为适宜的系统。

*** 注重实效！
不应该局限于特定技术，而是应该拥有足够广博的背景和经验基础，以让你能在特定
情况下选择好的解决方案。你的背景源自对计算机科学的基本原理的理解，而你的经验
来自广泛的实际项目。理论和实践的结合使你强大起来。

*** 它是一个持续的过程
每天为提炼你所拥有的技能而工作，为把新的工具增加到你的技能列表中而工作。

拥抱变化

你需要拥有广泛的知识和经验基础才能赢得这一切。

最大的弱点就是害怕暴露弱点。

当你同意为某个结果负责，你就要负起责任。出错时，寻求解决方案。
不要责备别人或别的东西，不要拼凑借口。

*** 经营你的知识资产
关于计算技术和所工作的应用领域的事实。
1 定期投资
即使每天投资量很小，习惯自身和总量一样重要。
2 多元化
你知道的不同的事情越多，你就越有价值。
3 管理风险
4 低买高卖
5 重新评估和平衡
*** 目标
1 每年至少学习一种新语言。
不同语言以不同方式解决相同的问题。通过学习若干不同方法，可以帮助你拓宽你的思维。
现在学习许多语言已容易了许多，感谢可从网上自由获取的软件财富。
2 每季度阅读一本技术书籍。
一旦养成习惯，就一个月读一本书。不断扩宽范围。
3 也要阅读非技术书籍。
计算机是由人使用的。
4 上课
5 参加本地用户组织
不只听讲，而要主动参与。与世隔绝对你的职业生涯来说可能是致命的；
打听下你们公司以外的人都在做什么。
6 实验不同的环境。
玩玩linux
7 跟上潮流。
8 上网
新闻组，上网冲浪，查找论文，商业站点。

持续投入十分重要。一旦你熟悉了某种新语言或新技术，继续前进。
去书中，网上，或请教他人。
所有阅读和研究都需要时间，而时间已经很短缺。
你需要预先规划，让自己在空闲时总有东西可读。

*** 批判的思考
最后，批判地思考你读到的和听到的。

1 这周就开始学习一种新语言。
总在用C++？试试Smalltalk或Squeak。在用Java？试试Eiffel或TOM。
2 开始阅读一本新书。如果你在进行非常详细的实现和编码，就阅读关于设计和架构的书。
如果你在进行高级设计，就阅读关于编码技术的书。
3 结交朋友





